# backend/app/schemas/analysis.py
from pydantic import BaseModel
from datetime import datetime
from typing import Optional, Dict, Any
from enum import Enum


class AnalysisStatus(str, Enum):
    pending = "pending"
    success = "success"
    failed = "failed"


class AnalysisBase(BaseModel):
    symbol: str
    interval: str
    signal: str
    target_price: Optional[float]
    status: str
    created_at: datetime

    risk: Optional[Dict[str, Any]] = None
    ta: Optional[Dict[str, Any]] = None
    derivs: Optional[Dict[str, Any]] = None
    onchain: Optional[Dict[str, Any]] = None
    notes: Optional[str] = None


class AnalysisCreate(BaseModel):
    symbol: str
    interval: str
    deposit: float
    riskPct: float


class AnalysisDB(BaseModel):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ö–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    """

    id: int
    symbol: str
    interval: str
    signal: str
    target_price: Optional[float]
    status: str
    created_at: Optional[datetime]

    risk: Optional[Dict[str, Any]] = None
    ta: Optional[Dict[str, Any]] = None
    derivs: Optional[Dict[str, Any]] = None
    onchain: Optional[Dict[str, Any]] = None
    notes: Optional[str] = None

    class Config:
        from_attributes = True  # ‚úÖ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SQLAlchemy ‚Üí Pydantic


# üîπ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ø–∏—Å–∫–∞—Ö)
class AnalysisOut(BaseModel):
    id: int
    symbol: str
    interval: str
    signal: str
    target_price: Optional[float]
    created_at: datetime
    status: str

    class Config:
        from_attributes = True

